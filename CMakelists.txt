cmake_minimum_required(VERSION 4.0)
project(learn_vulkan LANGUAGES CXX VERSION 1.0.0)
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/CMake")

set(TARGET_NAME "triangle")
set(SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/source")
add_executable(${TARGET_NAME}
    ${SOURCE_DIR}/triangle.cpp
    ${SOURCE_DIR}/vertex.hpp
)
target_compile_features(${TARGET_NAME} PRIVATE cxx_std_23)

find_package(glfw3 REQUIRED)
if (glfw3_FOUND)
    # target_include_directories(${TARGET_NAME} PRIVATE ${GLFW_INCLUDE_DIRS})
    target_link_libraries(${TARGET_NAME} PRIVATE glfw)
else()
    message(FATAL_ERROR "GLFW not found")
endif()

find_package(glm REQUIRED)
if (glm_FOUND)
    # target_include_directories(${TARGET_NAME} PRIVATE ${GLM_INCLUDE_DIRS})
    target_link_libraries(${TARGET_NAME} PRIVATE glm::glm)
else()
    message(FATAL_ERROR "GLM not found")
endif()

find_package (Vulkan REQUIRED)

# set up Vulkan C++ module
add_library(VulkanCppModule)
add_library(Vulkan::cppm ALIAS VulkanCppModule)

target_compile_definitions(VulkanCppModule PUBLIC
    VULKAN_HPP_DISPATCH_LOADER_DYNAMIC=1
    VULKAN_HPP_NO_STRUCT_CONSTRUCTORS=1
)
target_include_directories(VulkanCppModule
    PUBLIC
    "${Vulkan_INCLUDE_DIR}"
)
target_include_directories(${TARGET_NAME} PRIVATE
    Vulkan::Headers
)
target_link_libraries(VulkanCppModule
    PUBLIC
    Vulkan::Vulkan
)

set_target_properties(VulkanCppModule PROPERTIES CXX_STANDARD 23)

target_sources(VulkanCppModule
    PUBLIC
    FILE_SET cxx_modules TYPE CXX_MODULES
    BASE_DIRS
    "${Vulkan_INCLUDE_DIR}"
    FILES
    "${Vulkan_INCLUDE_DIR}/vulkan/vulkan.cppm"
)

target_link_libraries(${TARGET_NAME} PUBLIC Vulkan::cppm)

set(SHADER_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/shaders")
set(SHADER_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/shaders")

add_custom_target(copy_shaders ALL
    COMMAND ${CMAKE_COMMAND} -E make_directory ${SHADER_BINARY_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        ${SHADER_SOURCE_DIR}/vert.spv
        ${SHADER_BINARY_DIR}/vert.spv
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        ${SHADER_SOURCE_DIR}/frag.spv
        ${SHADER_BINARY_DIR}/frag.spv
    DEPENDS 
        ${SHADER_SOURCE_DIR}/vert.spv
        ${SHADER_SOURCE_DIR}/frag.spv
    COMMENT "Copying shader files to build directory"
)
